#!/usr/bin/env bash
set -euo pipefail

# 23andMe raw file QC + metadata extractor
# Usage: qc_23andme.sh path/to/23andme_raw.txt[.gz]
# Env knobs (optional):
#   EXPECT_V5_MIN=550000 EXPECT_V5_MAX=700000   # expected v5 variant count window
#   EXPECT_V4_MIN=500000 EXPECT_V4_MAX=650000   # expected v4 window
#   EXPECT_V3_MIN=800000 EXPECT_V3_MAX=1100000  # expected v3 window
#   MAX_BAD_ROWS=0                               # allow some malformed rows before FAIL
#   MAX_MISS_RATE=0.02                           # max allowed no-call rate (e.g. 0.02 = 2%)

EXPECT_V5_MIN="${EXPECT_V5_MIN:-550000}"
EXPECT_V5_MAX="${EXPECT_V5_MAX:-700000}"
EXPECT_V4_MIN="${EXPECT_V4_MIN:-500000}"
EXPECT_V4_MAX="${EXPECT_V4_MAX:-650000}"
EXPECT_V3_MIN="${EXPECT_V3_MIN:-800000}"
EXPECT_V3_MAX="${EXPECT_V3_MAX:-1100000}"
MAX_BAD_ROWS="${MAX_BAD_ROWS:-0}"
MAX_MISS_RATE="${MAX_MISS_RATE:-0.02}"

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <23andMe_raw.txt[.gz]>" >&2
  exit 1
fi

FILE="$1"
if [[ ! -f "$FILE" ]]; then
  echo "ERROR: File not found: $FILE" >&2
  exit 1
fi

# Choose reader (supports .gz)
if [[ "$FILE" =~ \.gz$ ]]; then
  READER="zcat"
else
  READER="cat"
fi

# Extract header metadata
HEADER="$($READER "$FILE" | sed -n '1,50p' | grep '^#' || true)"

gen_at="$(grep -i '^#.*generated by 23andMe at:' <<<"$HEADER" | sed -E 's/^# *This data file generated by 23andMe at: *//I' | xargs || true)"
gen_build="$(grep -Ei '^#.*(genome assembly|build|GRCh|hg)[0-9]+' <<<"$HEADER" | sed -E 's/^# *//;s/\r$//' | head -n1 || true)"
col_header="$($READER "$FILE" | grep -m1 '^#' -n | cut -d: -f1 | xargs -I{} $READER "$FILE" | sed -n '1,{}p' | grep -E '^# *rsid' | sed -E 's/^# *//' || true)"

# Body line stream (strip Windows CRs just in case)
stream() { $READER "$FILE" | tr -d '\r'; }

# Count non-comment (data) rows
total_variants="$(stream | awk 'BEGIN{c=0} !/^#/ && NF>0 {c++} END{print c}')"

# Validate fields and gather stats
# Allowed chroms: 1-22, X, Y, MT, M
# Genotype: AA/AC/.../TT or -- (no call)
readarray -t stats < <(
  stream | awk '
    BEGIN{
      FS="\t"; bad=0; invalid_chr=0; invalid_pos=0; invalid_rsid=0; invalid_gt=0;
      miss=0; rows=0; dup=0; out_of_order=0;
    }
    # chromosome order mapping
    function c2n(c) {
      if (c ~ /^[0-9]+$/) return c+0;
      if (c=="X") return 23;
      if (c=="Y") return 24;
      if (c=="MT" || c=="M") return 25;
      return -1;
    }
    # valid genotype?
    function valid_gt(g){
      return (g ~ /^(AA|AC|AG|AT|CC|CG|CT|GG|GT|TT|--)$/)
    }
    !/^#/ && NF>0 {
      rows++;
      if (NF!=4) { bad++; next; }
      rs=$1; chr=$2; pos=$3; gt=$4;

      # rsid
      if (rs !~ /^rs[0-9]+$/) invalid_rsid++;

      # chromosome
      chrnum=c2n(chr);
      if (chrnum<0 || chrnum>25) invalid_chr++;

      # position
      if (pos !~ /^[0-9]+$/ || pos==0) invalid_pos++;

      # genotype
      if (!valid_gt(gt)) invalid_gt++;
      if (gt=="--") miss++;

      # duplicates (by rsid)
      if (seen[rs]++) dup++;

      # sort check (chr,pos nondecreasing)
      if (rows==1){ prevc=chrnum; prevp=pos+0; }
      else {
        if (chrnum<prevc || (chrnum==prevc && (pos+0)<prevp)) out_of_order++;
        prevc=chrnum; prevp=pos+0;
      }
    }
    END{
      miss_rate=(rows>0)?miss/rows:0;
      print rows;
      print bad;
      print invalid_chr;
      print invalid_pos;
      print invalid_rsid;
      print invalid_gt;
      print miss;
      printf "%.6f\n", miss_rate;
      print dup;
      print out_of_order;
    }'
)

rows="${stats[0]}"
bad="${stats[1]}"
invalid_chr="${stats[2]}"
invalid_pos="${stats[3]}"
invalid_rsid="${stats[4]}"
invalid_gt="${stats[5]}"
miss="${stats[6]}"
miss_rate="${stats[7]}"
dup="${stats[8]}"
out_of_order="${stats[9]}"

# Try to detect declared version from header (rare), else infer
declared_ver="$(grep -Eio 'v[0-9]+' <<<"$HEADER" | head -n1 || true)"
infer_ver="unknown"
if (( rows >= EXPECT_V5_MIN && rows <= EXPECT_V5_MAX )); then infer_ver="v5"
elif (( rows >= EXPECT_V4_MIN && rows <= EXPECT_V4_MAX )); then infer_ver="v4"
elif (( rows >= EXPECT_V3_MIN && rows <= EXPECT_V3_MAX )); then infer_ver="v3"
fi

# Flagging logic
status="OK"
notes=()

# malformed rows
if (( bad > MAX_BAD_ROWS )); then status="FAIL"; notes+=("Too many malformed rows: $bad")
elif (( bad > 0 )); then notes+=("Has malformed rows: $bad")
fi

# missing rate
awk -v x="$miss_rate" -v thr="$MAX_MISS_RATE" 'BEGIN{exit !(x>thr)}' && { status="FAIL"; notes+=("Missing/no-call rate too high: " $(printf "%.2f%%" "$(awk -v x="$miss_rate" 'BEGIN{print x*100}')")); } || true

# invalid fields
if (( invalid_chr>0 )); then status="FAIL"; notes+=("Invalid chromosomes: $invalid_chr"); fi
if (( invalid_pos>0 )); then status="FAIL"; notes+=("Invalid positions: $invalid_pos"); fi
if (( invalid_rsid>0 )); then notes+=("Non-rsid identifiers: $invalid_rsid"); fi
if (( invalid_gt>0 )); then status="FAIL"; notes+=("Invalid genotypes: $invalid_gt"); fi

# duplicates
if (( dup>0 )); then notes+=("Duplicate rsids: $dup"); fi

# sort order
if (( out_of_order>0 )); then notes+=("Out-of-order rows (chr/pos): $out_of_order"); fi

# version window check (especially important for v5)
ver_window_note=""
if [[ "$infer_ver" == "v5" ]]; then
  # sanity: if way outside, warn hard
  if (( rows < EXPECT_V5_MIN || rows > EXPECT_V5_MAX )); then
    status="WARN"
    ver_window_note="Variant count ($rows) outside v5 window [$EXPECT_V5_MIN,$EXPECT_V5_MAX] â€” file may be tampered/merged."
  fi
fi

# Print report
echo "====== 23andMe Raw File QC ======"
echo "File:           $FILE"
echo "Size:           $(du -h "$FILE" | awk "{print \$1}")"
echo "Detected cols:  ${col_header:-'(not found; expected: rsid chromosome position genotype)'}"
echo "Generated at:   ${gen_at:-'(unknown)'}"
echo "Genome build:   ${gen_build:-'(unknown; usually GRCh37/hg19)'}"
echo "Declared ver:   ${declared_ver:-'(none in header)'}"
echo "Inferred ver:   $infer_ver"
echo "---------------------------------"
printf "Variants:       %s\n" "$rows"
printf "No-calls:       %s (%.2f%%)\n" "$miss" "$(awk -v x="$miss_rate" 'BEGIN{print x*100}')"
printf "Malformed rows: %s\n" "$bad"
printf "Invalid chr:    %s\n" "$invalid_chr"
printf "Invalid pos:    %s\n" "$invalid_pos"
printf "Non-rsid IDs:   %s\n" "$invalid_rsid"
printf "Invalid GTs:    %s\n" "$invalid_gt"
printf "Duplicate rsids:%s\n" "$dup"
printf "Out-of-order:   %s\n" "$out_of_order"
echo "---------------------------------"
echo "Expected windows (by variant count):"
echo "  v3: ${EXPECT_V3_MIN}-${EXPECT_V3_MAX}"
echo "  v4: ${EXPECT_V4_MIN}-${EXPECT_V4_MAX}"
echo "  v5: ${EXPECT_V5_MIN}-${EXPECT_V5_MAX}"
echo "---------------------------------"

if [[ -n "$ver_window_note" ]]; then
  echo "Version note:   $ver_window_note"
fi

if ((${#notes[@]})); then
  echo "Flags:"
  for n in "${notes[@]}"; do echo "  - $n"; done
else
  echo "Flags:          (none)"
fi
echo "QC STATUS:      $status"
echo "================================="
